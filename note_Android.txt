ANDROID CODETUTOR

THREAD

1. Remember Thread only run when call start()

Main_UIThread

1. Your code run on UI/Main Thread by default.
2. Action takes more than 5 seconds (connect service, download image... ) on UI Thread -> not responding
3. Create a seperate thread and execute action in this thread.
4. But cannot update the UI view on seperate thread -> using Handler and Looper.
5. If update view on seperate thread -> Error: Only the original thread that created a view hierarchy can touch its views.zxc


6. Android maintans a queue which is called as a message queue. It was populated with tasks (update the UI, click the button...)
7. UI thread is under constant loop (Looper) will execute tasks.xc
8. Seperate thread cannot directly put the task in that particular queue.
9. Thread using Handler to put the task in to queue. The task should be of type Runnable instance. zxczxcxc	
Handle should have a reference to the message queue of the UI thread.

xzc

_ Have 4 methods make sure you are able to do long running tasks in a way you don't hog the main thread.
+ doInBackground() runs in seperate thread.
+ onPreExecute() runs in main thread before doInBackground()
+ onPostExecute() runs in main thread to update UI once doInBackground() completes.
+ onProgressUpdate() shows progress of working on main thread.

_ Have 3 params
+ Params: is all about the starting value which AsyncTask will start it's work.
+ Progress: is the parameter that onProgressUpdate() method will use to keep updating the UI when doInBackground() still is under progress.
+ Result: is the final result update.

------------------------------
Custom Looper and Handler (sendMessage)

1. Create a class extends Thread
2. Make it a looper in run() method.

+ Looper.prepare()
+ Looper.loop()

_ run() only execute once

3. Create a new Handler
_ msg.obj will be initialized by Thread sends message to handler. Thread is MainActivity(in example) or anywhere.

_ looperThread.handler.sendMessage(message)

------------------------------
Custom Looper with custom Handler (post new Runnable)

1. Handler will place Runnable instance in Message queue of Looper thread.

looperThread.handler.post(new Runnable() {
            @Override
            public void run() {...

2. runOnUiThread() transfer the control from non-UI thread to UI thread.

------------------------------
HandlerThread

1. HandlerThread is Thread. Because it extends from Thread.

2. HandlerThread has onLooperPrepared() method.

=> both Custom Looper and HandlerThread will use runOnUiThread() to update view.

==========================
CONTENT PROVIDER - Intro

1. App 2 cannot get data from app 1 because this is private. So only legal mechanism is the app 2 to need to request the data from app 1. 
And app 1 will respond back.

2. How? We will use new component is Content Provider. App 2 will use API called as Content Resolver will hit app once database.
And app 1 will respond back using a format called as Cursor.

3. getContentResolver() which returns instance of a Content Resolver actually hit the correct content provider.

4. URI: Uniform Resource Identifier like URL hit a unique website. URI hits to unique content provider.

5. Content Resolver provides you CRUD (create - retrieve - update - delete) operations. And batch operations provides you a mechanism to connect
with a remote data.

6. You can think the data returned from the content provider as tabular formating containing rows and columns.
Cursor is an API which allows you to traverse through those rows.

7. All most content provider in API starts with android.provider.*

------------------------------
CONTENT PROVIDER - Loader and Cursor Loader

We have 3 main flow:

1. Request for data from Content Resolver (UI Thread)

2. Load the data from Content Provider (cannot load in UI Thread causes ANR). We can use Thread, AsyncTask or Loader, Cursor Loader

3. Init UI with data.


_ Loader

1. Activity can have a single/multiple Loaders.

2. Activity implements LoaderManager.LoaderCallbacks<Cursor>

3. init and restart Loader

_ getLoaderManager().initLoader(1, null, this); // indentifier, bundle, loaderCallback ('this' bescause Activity is implements LoaderCallbacks)
_ getLoaderManager().restartLoader(1, null, this);

4. Callback methods:

onCreateLoader(): create worker thread
onLoadFinished(): thread is completed, this method will be triggred and update UI.
onLoaderReset(): reset worker thread


content://com.android.contacts/raw_contacts
https://stackoverflow.com/questions/4459138/insert-contact-in-android-with-contactscontract
https://www.grokkingandroid.com/better-performance-with-contentprovideroperation/
https://www.grokkingandroid.com/androids-contentprovideroperation-withbackreference-explained/

==========================
ANDROID DATA PERSISTENT - Intro

1. On-device and Off-device
2. On-device:
+ File IO: read/write data (external storage). Type of data: XML, JSON, images, CSV. Should know Java IO Streams
+ Shared Preferences: app settings are usually stored in this. App sensitive data should not be store. Type of data: XML
+ SQLite: type of data is Embedded (server-client) and Relational Database.  
And we may want to share it with another app in that case you have to use Custom ContentProvider.

3. Off-device:
+ Web services: type of data is JSON, XML, images. Should know about XML/JSON parsing, Threads, AsyncTask and basic idea of Web Services.

4. Path of file: data/data/<package_name> in Device File Explorer.


==========================
MEMORY LEAK

1. Change rotate of device -> memory leak -> many activity instance
2. Using Android Monitor or Android Profiler or LeakCanary to detect memory leak
3. Using "this" (activity context) is reason cause memory leak.
Use getApplicationContext() or getContext() -> create application context once time by Singleton.

https://stackoverflow.com/questions/10864853/when-exactly-is-it-leak-safe-to-use-anonymous-inner-classes/10968689
https://blog.andresteingress.com/2011/10/12/anonymous-inner-classes-in-android

_ Avoid:
1. WeakReference static activity
2. Set null for static textview on Destroy
3. Inner class do not set static
4. Declare static inner class for AsyncTask
5. Check interrupt for Thread. Do not use anonymous inner class
6. Handler and Runnable
7. Timer
8. Sensor

=> Rule: avoid anonymous or anonymous inner class. Use Static inner class

==========================
SERVICES

1. Service is call by explicit intent
2. startService -> onStartCommand()
3. stopService of stopSelf
4. Three constants
_ START_STICKY: auto start not intent, not remember state (music)
_ START_NOT_STICKY: not auto start, period running and self stopping (alarm)
_ START_REDELIVER_INTENT: auto re-start from previous state (file download)
5. Local binding and remote binding
6. Components can bind to Service are Activity, Service and Content Provider.
7. You can bind a service which has not started.
8. A bound service cannot be stopped -> call unBindService() will get onUnbind() and onDestroy() service.
9. onBind() and onUnbind() call once time.
10.
_ startService -> bind -> unbind -> destroy automatically
_ bind service -> start -> unbind -> not destroy. We destroy manually.

Remote binding

There is one handler at client side app and another handler in service side app.
ClientSide Handler - RecieveRandomNumberHandler - handles the message being received from Server side app
Server Side Handler - RandomNumberRequestHandler - handles the request message being sent from Service side app
There is one Handler in each app. - I hope this clarifies your doubt.ï»¿

==========================
FRAGMENT

1. Add fragment in statically (xml - before runtime) and dynamically (code - in runtime)
2. Fragment do not are declared in Android Manifest same as Activity, Service, BroadcastReceiver, ContentProvider.
3. Different about library android.support.v4.app with android.app:
_ FragmentManager
_ FragmentTransaction
4. Fragment is added by dynamically need view holder in main activity (FrameLayout)
5. Fragment lifecycle

onAttach
onCreate
onCreateView
onActivityCreated
onStart
onResume
onPause
onStop
onDestroyView
onDestroy
onDetach

6. Combine Activity with Fragment lifecycle

onCreate
onStart
SampleFragment onAttach
SampleFragment onCreate
SampleFragment onCreateView
SampleFragment onActivityCreated
SampleFragment onStart
onResume
SampleFragment onResume
03-11 11:56:07.543 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: onPause
03-11 11:56:07.543 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onPause
03-11 11:56:08.208 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: onStop
03-11 11:56:08.209 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onStop
03-11 11:56:08.209 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: onDestroy
03-11 11:56:08.209 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDestroyView
03-11 11:56:08.210 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDestroy
03-11 11:56:08.210 15989-15989/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDetach

7. Add button

03-11 12:07:58.886 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: onCreate
03-11 12:07:58.945 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: onStart
03-11 12:07:58.950 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: onResume
03-11 13:56:01.850 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onAttach
03-11 13:56:01.850 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onCreate
03-11 13:56:01.850 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onCreateView
03-11 13:56:01.852 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onActivityCreated
03-11 13:56:01.852 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onStart
03-11 13:56:01.852 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onResume
03-11 13:57:22.027 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: onPause
03-11 13:57:22.027 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onPause
03-11 13:57:23.103 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: onStop
03-11 13:57:23.103 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onStop
03-11 13:57:23.104 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: onDestroy
03-11 13:57:23.104 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDestroyView
03-11 13:57:23.104 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDestroy
03-11 13:57:23.105 17124-17124/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDetach

8. Fragment addToBackStack: create a seperate stack for Fragment. 

_ Click Back btn only destroy fragment not activity.

03-11 14:02:18.125 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: onCreate
03-11 14:02:18.186 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: onStart
03-11 14:02:18.188 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: onResume
03-11 14:02:37.020 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onAttach
03-11 14:02:37.020 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onCreate
03-11 14:02:37.021 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onCreateView
03-11 14:02:37.022 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onActivityCreated
03-11 14:02:37.022 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onStart
03-11 14:02:37.022 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onResume
03-11 14:02:41.670 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onPause
03-11 14:02:41.670 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onStop
03-11 14:02:41.671 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDestroyView
03-11 14:02:41.671 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDestroy
03-11 14:02:41.671 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: SampleFragment onDetach
03-11 14:02:45.373 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: onPause
03-11 14:02:46.101 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: onStop
03-11 14:02:46.102 17654-17654/expert.android.quoccuong.fragment I/CuongDNQ: onDestroy

9. Activity back stack is managed by Activity Manager
_ Fragment back stack is managed by Fragment Manager and developer

10. findFragmentById

11. add() contains multiple fragments at FrameLayout. Back press button destroys multi.
_ replace() contains only one fragment at FrameLayout. Back press button destroys one fragment and then activity.

12. Log addToBackStack and remove backStack. Why is press back button is "Remove SampleFragment" again?

Remove SampleFragment
Remove SampleFragment
Remove SampleFragment
Remove FragmentTwo
Remove FragmentThree
Remove SampleFragment
Add SampleFragment
Add FragmentThree
Add FragmentTwo
Add SampleFragment

13. Each commit is a transaction entry in back stack.

14. transaction.addToBackStack() is a back stack of transaction, not Fragment back stack.

15. Click Remove (twice) and Pop (twice) cause error: Fragment already exists.

16. 
_ popBackStack(0, 0): pop all stacks except index 0
1st argument: specific back stack position
2nd argument: stack at zero index do not pop.

_ popBackStack(0, FragmentManager.POP_BACK_STACK_INCLUSIVE); // pop all stacks
_ .popBackStack(1, FragmentManager.POP_BACK_STACK_INCLUSIVE); // pop all stacks from index 1 (except index 0 not pop)

_ popBackStack("Add SampleFragment", 0); // pop all stacks not including "Add SampleFragment"
_ popBackStack("Add SampleFragment", FragmentManager.POP_BACK_STACK_INCLUSIVE); // pop all stacks reach to "Add SampleFragment"

17. Screen orientation change will call onCreate() in Activity again. Activity will restart. So fragment is destroy.

_ Prevent activity will restart - call onCreate() - by set configuration screen in Manifest.

android:configChanges="orientation|screenSize|keyboardHidden"

_ Check state of savedInstanceState:

if (savedInstanceState == null) { // if null that means it a onCreate, else if not null that means activity restarts (still calls onCreate but not 1st time).
    addCountriesFragment();
}

-> fragment is keeping but 'this' activity no more valid when change orientation of screen (cannot click listener on listView) -> callback reference is lot

countriesFragment.setFragmentActionListener(this);

-> reset callback reference in fragment

@Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        if (savedInstanceState != null) { // reset callback reference
            fragmentActionListener = (MainActivity) getActivity();
        }
    }
