ANDROID CODETUTOR

THREAD

1. Remember Thread only run when call start()

Main_UIThread

1. Your code run on UI/Main Thread by default.
2. Action takes more than 5 seconds (connect service, download image... ) on UI Thread -> not responding
3. Create a seperate thread and execute action in this thread.
4. But cannot update the UI view on seperate thread -> using Handler and Looper.
5. If update view on seperate thread -> Error: Only the original thread that created a view hierarchy can touch its views.zxc


6. Android maintans a queue which is called as a message queue. It was populated with tasks (update the UI, click the button...)
7. UI thread is under constant loop (Looper) will execute tasks.xc
8. Seperate thread cannot directly put the task in that particular queue.
9. Thread using Handler to put the task in to queue. The task should be of type Runnable instance. zxczxcxc	
Handle should have a reference to the message queue of the UI thread.

xzc

_ Have 4 methods make sure you are able to do long running tasks in a way you don't hog the main thread.
+ doInBackground() runs in seperate thread.
+ onPreExecute() runs in main thread before doInBackground()
+ onPostExecute() runs in main thread to update UI once doInBackground() completes.
+ onProgressUpdate() shows progress of working on main thread.

_ Have 3 params
+ Params: is all about the starting value which AsyncTask will start it's work.
+ Progress: is the parameter that onProgressUpdate() method will use to keep updating the UI when doInBackground() still is under progress.
+ Result: is the final result update.

------------------------------
Custom Looper and Handler (sendMessage)

1. Create a class extends Thread
2. Make it a looper in run() method.

+ Looper.prepare()
+ Looper.loop()

_ run() only execute once

3. Create a new Handler
_ msg.obj will be initialized by Thread sends message to handler. Thread is MainActivity(in example) or anywhere.

_ looperThread.handler.sendMessage(message)

------------------------------
Custom Looper with custom Handler (post new Runnable)

1. Handler will place Runnable instance in Message queue of Looper thread.

looperThread.handler.post(new Runnable() {
            @Override
            public void run() {...

2. runOnUiThread() transfer the control from non-UI thread to UI thread.

------------------------------
HandlerThread

1. HandlerThread is Thread. Because it extends from Thread.

2. HandlerThread has onLooperPrepared() method.

=> both Custom Looper and HandlerThread will use runOnUiThread() to update view.

==========================
CONTENT PROVIDER - Intro

1. App 2 cannot get data from app 1 because this is private. So only legal mechanism is the app 2 to need to request the data from app 1. 
And app 1 will respond back.

2. How? We will use new component is Content Provider. App 2 will use API called as Content Resolver will hit app once database.
And app 1 will respond back using a format called as Cursor.

3. getContentResolver() which returns instance of a Content Resolver actually hit the correct content provider.

4. URI: Uniform Resource Identifier like URL hit a unique website. URI hits to unique content provider.

5. Content Resolver provides you CRUD (create - retrieve - update - delete) operations. And batch operations provides you a mechanism to connect
with a remote data.

6. You can think the data returned from the content provider as tabular formating containing rows and columns.
Cursor is an API which allows you to traverse through those rows.

7. All most content provider in API starts with android.provider.*

------------------------------
CONTENT PROVIDER - Loader and Cursor Loader

We have 3 main flow:

1. Request for data from Content Resolver (UI Thread)

2. Load the data from Content Provider (cannot load in UI Thread causes ANR). We can use Thread, AsyncTask or Loader, Cursor Loader

3. Init UI with data.


_ Loader

1. Activity can have a single/multiple Loaders.

2. Activity implements LoaderManager.LoaderCallbacks<Cursor>

3. init and restart Loader

_ getLoaderManager().initLoader(1, null, this); // indentifier, bundle, loaderCallback ('this' bescause Activity is implements LoaderCallbacks)
_ getLoaderManager().restartLoader(1, null, this);

4. Callback methods:

onCreateLoader(): create worker thread
onLoadFinished(): thread is completed, this method will be triggred and update UI.
onLoaderReset(): reset worker thread


content://com.android.contacts/raw_contacts
https://stackoverflow.com/questions/4459138/insert-contact-in-android-with-contactscontract
https://www.grokkingandroid.com/better-performance-with-contentprovideroperation/
https://www.grokkingandroid.com/androids-contentprovideroperation-withbackreference-explained/

==========================
ANDROID DATA PERSISTENT - Intro

1. On-device and Off-device
2. On-device:
+ File IO: read/write data (external storage). Type of data: XML, JSON, images, CSV. Should know Java IO Streams
+ Shared Preferences: app settings are usually stored in this. App sensitive data should not be store. Type of data: XML
+ SQLite: type of data is Embedded (server-client) and Relational Database.  
And we may want to share it with another app in that case you have to use Custom ContentProvider.

3. Off-device:
+ Web services: type of data is JSON, XML, images. Should know about XML/JSON parsing, Threads, AsyncTask and basic idea of Web Services.

4. Path of file: data/data/<package_name> in Device File Explorer.

----------------------------
SHARED PREFERENCES

1. Store non sensitive data (language, fontsize, audio volume, cache username...) in xml.

2. <Key, Value> and no parsing

3. Data types: boolean, float, int, long, String, Set<String>

4. get:
_ Context.getSharedPreferences
_ Activity.getPreferences

5. put and get

_ PUT:
SharedPreferences.Editor editor = sharedPreferences.edit();
editor.putString("sample_key", text);
editor.commit();

_ GET:
sharedPreferences.getString("sample_key", "String not found")

